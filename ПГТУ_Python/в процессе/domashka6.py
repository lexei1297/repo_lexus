Правильный порядок будет таким:

def функция(формальный_параметр1, формальный_параметр2=значение_по_умолчанию, *args, **kwargs):
    pass

Вот пример функции, которая иллюстрирует этот порядок:

def пример_функции(a, b=2, *args, **kwargs):
    print(f'a: {a}, b: {b}')
    print('args:', args)
    print('kwargs:', kwargs)

# Вызов функции
пример_функции(1, 3, 4, 5, x=10, y=20)

a: 1, b: 3
args: (4, 5)
kwargs: {'x': 10, 'y': 20}

*args позволяет передавать произвольное количество позиционных аргументов, которые будут доступны в виде кортежа.
**kwargs позволяет передавать произвольное количество именованных аргументов, которые будут доступны в виде словаря.


Вот пример реализации функции print_lists, которая принимает произвольное количество списков и именованные аргументы для настройки способов печати:

def print_lists(*lists, how=None):
    # Устанавливаем значения по умолчанию для sep и end
    sep = ' ' if how is None or 'sep' not in how else how['sep']
    end = '\n' if how is None or 'end' not in how else how['end']
    
    for lst in lists:
        # Преобразуем список в строку с применением нужного разделителя
        print(sep.join(map(str, lst)), end=end)

# Пример для проверки кода
print_lists([1, 2, 3], [4, 5, 6], [7, 8, 9])
Объяснение кода:
*lists: позволяет передавать произвольное количество списков.
how=None: это дополнительный параметр, который будет использоваться для передачи настроек, таких как sep и end.
Установка значений по умолчанию:
Если how не задан или если в нем отсутствует sep, используется разделитель по умолчанию — пробел.
Аналогично, для end используется перевод строки по умолчанию.
Цикл for lst in lists: Для каждого переданного списка:
Списки преобразуются в строки при помощи функции map, которая применяет str() к каждому элементу списка.
Списки выводятся с указанным разделителем и окончанием.
Пример использования функции:
Вы можете вызвать функцию с произвольным количеством списков.


print_lists([1, 2, 3], [4, 5, 6], [7, 8, 9])
# Вывод будет:
# 1 2 3
# 4 5 6
# 7 8 9
Дополнительный пример с аргументами how:
Если вы хотите изменить разделитель или окончание строки, вы можете передать аргументы следующим образом:

print_lists([1, 2, 3], [4, 5, 6], [7, 8, 9], how={'sep': ', ', 'end': ' | '})
# Вывод будет:
# 1, 2, 3 | 4, 5, 6 | 7, 8, 9 | 
Таким образом, функция print_lists позволят вам печатать списки с настройками, которые легко модифицировать.